# Modules by Github

gtt() {
  echo "OK olá << MODULE - UTILS - GITHUB >> " # LOGAR FILE
}

gts() {
  git status
}

gtl() {
	git reflog
	# mostra menos detalhes no log de acoes feitas
}

gta() {
  git add .
}

gtc() {
  git commit -m "$1"
  # todo: no  git reflog não esta mostrando toda mensagem
}

gtp() {
  git push
}

# AUTOMACAO GITHUB ACOES : MUDANCAS REMOTO COM LOCAL
gtau() {
    echo "Iniciando automação Git..."

    local skip_pull=false
    local skip_merge=false
    local commit_message=""

    # Processar argumentos
    while [[ "$#" -gt 0 ]]; do
        case "$1" in
            --no-pull)
                skip_pull=true
                ;;
            --no-merge)
                skip_merge=true
                ;;
            -m)
                if [ -n "$2" ]; then
                    commit_message="$2"
                    shift # Consome o argumento da mensagem
                else
                    echo "Erro: -m requer uma mensagem de commit."
                    return 1
                fi
                ;;
            *)
                # Captura a mensagem de commit se não for uma flag
                if [ -z "$commit_message" ]; then
                    commit_message="$1"
                else
                    echo "Aviso: Argumento desconhecido '$1' será ignorado."
                fi
                ;;
        esac
        shift # Consome o argumento atual
    done

    # 1. git pull (opcional)
    if [ "$skip_pull" = false ]; then
        echo "Executando: git pull"
        git pull || { echo "Erro: git pull falhou."; return 1; }
    else
        echo "Pulando: git pull"
    fi

    # 2. git merge --no-edit (opcional, salvando automaticamente sem perguntar)
    if [ "$skip_merge" = false ]; then
        echo "Executando: git merge --no-edit (se necessário e sem conflitos)"
        # O --no-edit faz o merge sem abrir o editor para a mensagem de commit de merge.
        # Se houver conflitos, ele vai parar e exigir resolução manual.
        git merge --no-edit || { echo "Aviso: git merge falhou ou teve conflitos. Resolva-os manualmente."; }
    else
        echo "Pulando: git merge"
    fi

    # 3. git add .
    echo "Executando: git add ."
    git add . || { echo "Erro: git add falhou."; return 1; }

    # 4. git commit recebendo a mensagem ou opcional com mensagem padrao
    if [ -z "$commit_message" ]; then
        commit_message="Atualização automática - $(date +'%Y-%m-%d %H:%M:%S')"
    fi
    echo "Executando: git commit -m \"$commit_message\""
    git commit -m "$commit_message" || { echo "Erro: git commit falhou. Pode não haver alterações para commitar."; }

    # 5. git push
    echo "Executando: git push"
    git push || { echo "Erro: git push falhou."; return 1; }

    # 6. git reflog
    echo "Executando: git reflog"
    git reflog

    echo "Automação Git concluída."
}
